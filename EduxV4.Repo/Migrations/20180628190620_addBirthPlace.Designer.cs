// <auto-generated />
using System;
using EduxV4.Repo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EduxV4.Repo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180628190620_addBirthPlace")]
    partial class addBirthPlace
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EduxV4.Data.Activity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActivityDate");

                    b.Property<string>("ActivityNextStepId");

                    b.Property<string>("ActivitySourceId");

                    b.Property<string>("ActivityStatusId");

                    b.Property<string>("ActivityTypeId");

                    b.Property<DateTime?>("AppointmentDate");

                    b.Property<string>("CampusId");

                    b.Property<string>("ClassLevelId");

                    b.Property<string>("ContactId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("ForContactId");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Notes");

                    b.Property<string>("OldSchool")
                        .HasMaxLength(200);

                    b.Property<string>("PositivenessId");

                    b.Property<string>("SchoolLevelId");

                    b.Property<string>("StaffId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ActivityNextStepId");

                    b.HasIndex("ActivitySourceId");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassLevelId");

                    b.HasIndex("ContactId");

                    b.HasIndex("ForContactId");

                    b.HasIndex("PositivenessId");

                    b.HasIndex("SchoolLevelId");

                    b.HasIndex("StaffId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("EduxV4.Data.ActivityNextStep", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("ActivityNextSteps");
                });

            modelBuilder.Entity("EduxV4.Data.ActivitySource", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<string>("ParentActivitySourceId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ParentActivitySourceId");

                    b.ToTable("ActivitySources");
                });

            modelBuilder.Entity("EduxV4.Data.ActivityStatus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("ActivityStatuses");
                });

            modelBuilder.Entity("EduxV4.Data.ActivityType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("EduxV4.Data.Announcement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowComments");

                    b.Property<string>("Content");

                    b.Property<string>("CourseId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime?>("PublishDate");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<int>("Week");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("EduxV4.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EduxV4.Data.Branch", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AnnouncementId");

                    b.Property<string>("ClassLevelId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<string>("RoomId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("ClassLevelId");

                    b.HasIndex("RoomId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("EduxV4.Data.BranchAnnouncement", b =>
                {
                    b.Property<string>("BranchId");

                    b.Property<string>("AnnouncementId");

                    b.HasKey("BranchId", "AnnouncementId");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("BranchAnnouncements");
                });

            modelBuilder.Entity("EduxV4.Data.BranchCourseContent", b =>
                {
                    b.Property<string>("BranchId");

                    b.Property<string>("CourseContentId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Id");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("BranchId", "CourseContentId");

                    b.HasIndex("CourseContentId");

                    b.ToTable("BranchCourseContents");
                });

            modelBuilder.Entity("EduxV4.Data.BranchHomework", b =>
                {
                    b.Property<string>("BranchId");

                    b.Property<string>("HomeworkId");

                    b.HasKey("BranchId", "HomeworkId");

                    b.HasIndex("HomeworkId");

                    b.ToTable("BranchHomeworks");
                });

            modelBuilder.Entity("EduxV4.Data.Campus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<string>("SchoolId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("EduxV4.Data.City", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("EduxV4.Data.ClassLevel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<string>("SchoolLevelId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("SchoolLevelId");

                    b.ToTable("ClassLevels");
                });

            modelBuilder.Entity("EduxV4.Data.Contact", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(4000);

                    b.Property<string>("AnnouncementId");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(200);

                    b.Property<string>("CityId");

                    b.Property<string>("ClassLevelId");

                    b.Property<int>("ContactStage");

                    b.Property<int>("ContactType");

                    b.Property<string>("CountryId");

                    b.Property<string>("CountyId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("DistrictId");

                    b.Property<string>("Email")
                        .HasMaxLength(200);

                    b.Property<string>("FamilyId");

                    b.Property<int>("FamilyRole");

                    b.Property<string>("FatherId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200);

                    b.Property<int>("Gender");

                    b.Property<string>("IPAddress");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(11);

                    b.Property<string>("LandingPhone")
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .HasMaxLength(200);

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(200);

                    b.Property<string>("MotherId");

                    b.Property<string>("Notes");

                    b.Property<string>("OccupationId");

                    b.Property<string>("ParentId");

                    b.Property<string>("RegionId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("CityId");

                    b.HasIndex("ClassLevelId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("OccupationId");

                    b.HasIndex("RegionId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("EduxV4.Data.ContactCourseContent", b =>
                {
                    b.Property<string>("ContactId");

                    b.Property<string>("CourseContentId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Id");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("ContactId", "CourseContentId");

                    b.HasIndex("CourseContentId");

                    b.ToTable("ContactCourseContents");
                });

            modelBuilder.Entity("EduxV4.Data.ContactHomework", b =>
                {
                    b.Property<string>("ContactId");

                    b.Property<string>("HomeworkId");

                    b.HasKey("ContactId", "HomeworkId");

                    b.HasIndex("HomeworkId");

                    b.ToTable("ContactHomeworks");
                });

            modelBuilder.Entity("EduxV4.Data.Country", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("EduxV4.Data.County", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("EduxV4.Data.Course", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<int>("ExamStatus");

                    b.Property<string>("IPAddress");

                    b.Property<bool>("IsFixed");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EduxV4.Data.CourseContent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("CourseId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("File");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime?>("PublishDate");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<int>("Week");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseContents");
                });

            modelBuilder.Entity("EduxV4.Data.CourseResource", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BranchId");

                    b.Property<string>("CourseId");

                    b.Property<int>("CourseResourceType");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("IPAddress");

                    b.Property<string>("SeasonId");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SeasonId");

                    b.ToTable("CourseResources");
                });

            modelBuilder.Entity("EduxV4.Data.District", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountyId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("EduxV4.Data.Family", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("EduxV4.Data.Homework", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("HomeworkFile");

                    b.Property<string>("IPAddress");

                    b.Property<string>("SolutionFile");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Homeworks");
                });

            modelBuilder.Entity("EduxV4.Data.Occupation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("EduxV4.Data.Positiveness", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Positivenesses");
                });

            modelBuilder.Entity("EduxV4.Data.Region", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("DistrictId");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("EduxV4.Data.Room", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("EduxV4.Data.School", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("EduxV4.Data.SchoolLevel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CampusId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("SchoolLevels");
                });

            modelBuilder.Entity("EduxV4.Data.Season", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EduxV4.Data.Activity", b =>
                {
                    b.HasOne("EduxV4.Data.ActivityNextStep", "ActivityNextStep")
                        .WithMany()
                        .HasForeignKey("ActivityNextStepId");

                    b.HasOne("EduxV4.Data.ActivitySource", "ActivitySource")
                        .WithMany()
                        .HasForeignKey("ActivitySourceId");

                    b.HasOne("EduxV4.Data.ActivityStatus", "ActivityStatus")
                        .WithMany()
                        .HasForeignKey("ActivityStatusId");

                    b.HasOne("EduxV4.Data.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("EduxV4.Data.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId");

                    b.HasOne("EduxV4.Data.ClassLevel", "ClassLevel")
                        .WithMany()
                        .HasForeignKey("ClassLevelId");

                    b.HasOne("EduxV4.Data.Contact", "Contact")
                        .WithMany("Activities")
                        .HasForeignKey("ContactId");

                    b.HasOne("EduxV4.Data.Contact", "ForContact")
                        .WithMany("ActivitiesFor")
                        .HasForeignKey("ForContactId");

                    b.HasOne("EduxV4.Data.Positiveness", "Positiveness")
                        .WithMany()
                        .HasForeignKey("PositivenessId");

                    b.HasOne("EduxV4.Data.SchoolLevel", "SchoolLevel")
                        .WithMany()
                        .HasForeignKey("SchoolLevelId");

                    b.HasOne("EduxV4.Data.Contact", "Staff")
                        .WithMany("StaffActivities")
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("EduxV4.Data.ActivitySource", b =>
                {
                    b.HasOne("EduxV4.Data.ActivitySource", "ParentActivitySource")
                        .WithMany("ChildActivitySources")
                        .HasForeignKey("ParentActivitySourceId");
                });

            modelBuilder.Entity("EduxV4.Data.Announcement", b =>
                {
                    b.HasOne("EduxV4.Data.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("EduxV4.Data.Branch", b =>
                {
                    b.HasOne("EduxV4.Data.Announcement")
                        .WithMany("Branches")
                        .HasForeignKey("AnnouncementId");

                    b.HasOne("EduxV4.Data.ClassLevel", "ClassLevel")
                        .WithMany("Branches")
                        .HasForeignKey("ClassLevelId");

                    b.HasOne("EduxV4.Data.Room", "Room")
                        .WithMany("Branches")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("EduxV4.Data.BranchAnnouncement", b =>
                {
                    b.HasOne("EduxV4.Data.Announcement", "Announcement")
                        .WithMany()
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EduxV4.Data.Branch", "Branch")
                        .WithMany("BranchAnnouncements")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EduxV4.Data.BranchCourseContent", b =>
                {
                    b.HasOne("EduxV4.Data.Branch", "Branch")
                        .WithMany("BranchCourseContents")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EduxV4.Data.CourseContent", "CourseContent")
                        .WithMany("BranchCourseContents")
                        .HasForeignKey("CourseContentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EduxV4.Data.BranchHomework", b =>
                {
                    b.HasOne("EduxV4.Data.Branch", "Branch")
                        .WithMany("BranchHomeworks")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EduxV4.Data.Homework", "Homework")
                        .WithMany("BranchHomeworks")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EduxV4.Data.Campus", b =>
                {
                    b.HasOne("EduxV4.Data.School", "School")
                        .WithMany("Campuses")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("EduxV4.Data.City", b =>
                {
                    b.HasOne("EduxV4.Data.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("EduxV4.Data.ClassLevel", b =>
                {
                    b.HasOne("EduxV4.Data.SchoolLevel")
                        .WithMany("ClassLevels")
                        .HasForeignKey("SchoolLevelId");
                });

            modelBuilder.Entity("EduxV4.Data.Contact", b =>
                {
                    b.HasOne("EduxV4.Data.Announcement")
                        .WithMany("Students")
                        .HasForeignKey("AnnouncementId");

                    b.HasOne("EduxV4.Data.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("EduxV4.Data.ClassLevel", "ClassLevel")
                        .WithMany()
                        .HasForeignKey("ClassLevelId");

                    b.HasOne("EduxV4.Data.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("EduxV4.Data.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId");

                    b.HasOne("EduxV4.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("EduxV4.Data.Family", "Family")
                        .WithMany("Members")
                        .HasForeignKey("FamilyId");

                    b.HasOne("EduxV4.Data.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationId");

                    b.HasOne("EduxV4.Data.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("EduxV4.Data.ContactCourseContent", b =>
                {
                    b.HasOne("EduxV4.Data.Contact", "Contact")
                        .WithMany("ContactCourseContents")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EduxV4.Data.CourseContent", "CourseContent")
                        .WithMany("ContactCourseContents")
                        .HasForeignKey("CourseContentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EduxV4.Data.ContactHomework", b =>
                {
                    b.HasOne("EduxV4.Data.Contact", "Contact")
                        .WithMany("ContactHomeworks")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EduxV4.Data.Homework", "Homework")
                        .WithMany("ContactHomeworks")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EduxV4.Data.County", b =>
                {
                    b.HasOne("EduxV4.Data.City", "City")
                        .WithMany("Counties")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("EduxV4.Data.CourseContent", b =>
                {
                    b.HasOne("EduxV4.Data.Course", "Course")
                        .WithMany("CourseContents")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("EduxV4.Data.CourseResource", b =>
                {
                    b.HasOne("EduxV4.Data.Branch", "Branch")
                        .WithMany("CourseResources")
                        .HasForeignKey("BranchId");

                    b.HasOne("EduxV4.Data.Course", "Course")
                        .WithMany("CourseResources")
                        .HasForeignKey("CourseId");

                    b.HasOne("EduxV4.Data.Season", "Season")
                        .WithMany("CourseResources")
                        .HasForeignKey("SeasonId");
                });

            modelBuilder.Entity("EduxV4.Data.District", b =>
                {
                    b.HasOne("EduxV4.Data.County", "County")
                        .WithMany("Districts")
                        .HasForeignKey("CountyId");
                });

            modelBuilder.Entity("EduxV4.Data.Homework", b =>
                {
                    b.HasOne("EduxV4.Data.Course", "Course")
                        .WithMany("Homeworks")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("EduxV4.Data.Region", b =>
                {
                    b.HasOne("EduxV4.Data.District", "District")
                        .WithMany("Regions")
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("EduxV4.Data.SchoolLevel", b =>
                {
                    b.HasOne("EduxV4.Data.Campus", "Campus")
                        .WithMany("SchoolLevels")
                        .HasForeignKey("CampusId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EduxV4.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EduxV4.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EduxV4.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EduxV4.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
